name: Deploy Backend Infrastructure

on:
  push:
    branches: [main, master]
    paths:
      - 'terraform/**'
      - '.github/workflows/backend-deploy.yml'
  pull_request:
    branches: [main, master]
    paths:
      - 'terraform/**'

env:
  AWS_REGION: us-east-1
  TERRAFORM_VERSION: 1.5.0

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    permissions:
      id-token: write # Required for OIDC
      contents: read # Required to checkout code
      pull-requests: write # Required to comment on PRs

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-TerraformPlan

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        working-directory: ./terraform
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ./terraform

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false
        working-directory: ./terraform
        continue-on-error: true

      - name: Comment PR with Plan
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Plan')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Plan 📖
            - Terraform Format: \`${{ steps.fmt.outcome }}\`
            - Terraform Initialization: \`${{ steps.init.outcome }}\`
            - Terraform Validation: \`${{ steps.validate.outcome }}\`
            - Terraform Plan: \`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    permissions:
      id-token: write # Required for OIDC
      contents: read # Required to checkout code

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-TerraformApply

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Plan
        run: terraform plan -input=false -out=tfplan
        working-directory: ./terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: ./terraform

      - name: Get Terraform Outputs
        id: terraform-outputs
        run: |
          echo "bucket-name=$(terraform output -raw bucket_name)" >> $GITHUB_OUTPUT
          echo "api-endpoint=$(terraform output -raw api_gateway_endpoint)" >> $GITHUB_OUTPUT
          echo "website-endpoint=$(terraform output -raw bucket_website_endpoint)" >> $GITHUB_OUTPUT
        working-directory: ./terraform

      - name: Display Infrastructure URLs
        run: |
          echo "🎉 Infrastructure deployed successfully!"
          echo "📦 S3 Bucket: ${{ steps.terraform-outputs.outputs.bucket-name }}"
          echo "🌐 Website: http://${{ steps.terraform-outputs.outputs.website-endpoint }}"
          echo "🔗 API: ${{ steps.terraform-outputs.outputs.api-endpoint }}"
